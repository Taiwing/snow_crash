The objective seems to be loading a malicious library that will do the job to
execute getflag.

- ptrace is called, so no strace/ptrace/debugger magic
- LD_PRELOAD is checked, so probably no loading the lib that way
- /etc/ld.so.preload is checked too, and I dont have rights to /etc anyway

- this leaves only /proc/self/maps to do the job it would seem, but the file is
  not directly modfiable too, so it would seem to require a cleverer trick

 Ideas:

- there are what appears to be empty anonymous memory regions listed in the
  file, maybe they can be used to load an .so object (but how ? gets overflow?)
- the file is of size 0 which is... weird i dont really get it since I can open
  it and read it
- Ohhhh ok it's accessible to process reading it, thats why the weird /bin/cat
  calls... it makes sense actually, but still. This means the contents are not
  static... hmmm
- since its only for one process ('self', once again it makes sense), lets see
  what the file is when level09 opens it, even with gdb I think this could be
  interesting. Actually it must be the same as /proc/<pid>/maps where <pid> is
  the PID of the level09 process.

I AM FUCKING STUPID

The token is readable, so just reverse the fucker because ./level09 has been
used to 'encrypt' it. Then boom you get the level09 pass. I am so dumb. I did
not even check the token file. Anyway, that was an easy one too.
